# ARMv6-M Architecture Configuration File
# derived from ARM Cortex-M0, Technical Reference Manual, Revision: r0p0, 2009 

# arithmetic and logical operation
armv6m.arithmetic = 0
armv6m.arithmetic_with_pc = 2
armv6m.logic = 0 
armv6m.multiply = 31 # could also be 0

# special registers
armv6m.read_special_reg = 3
armv6m.write_special_reg = 3

# branches
armv6m.branch_conditional_taken_latency = 2
armv6m.branch_conditional_nottaken_latency = 0
armv6m.branch_unconditional_latency = 2
armv6m.branch_and_link_latency = 3
armv6m.branch_and_exchange_latency = 2
armv6m.branch_link_and_exchange_latency = 2
armv6m.pop_and_return_extra_latency = 3

# memory latency
armv6m.fetch_bandwidth = 32 # bit
armv6m.fetch_latency_onchip = 0
armv6m.fetch_latency_offchip = 4

armv6m.load_latency_onchip = 0
armv6m.load_latency_offchip = 4

armv6m.store_latency_onchip = 0
armv6m.store_latency_offchip = 4

# barriers
armv6m.data_sync_barrier = 3
armv6m.data_mem_barrier = 3
armv6m.instr_sync_barrier = 3

# configuration for instruction memories
armv6m.disp_mapping_table_size = 256 # in number of functions (notice: for different values of mapping table size and lookup width the disp hit and miss times need to be adjusted [see multi-cycle lookup])
armv6m.disp_lookup_width = 256 # in number of functions (notice: for different values of mapping table size and lookup width the disp hit and miss times need to be adjusted [see multi-cycle lookup]) 
armv6m.disp_context_stack_depth = 16 # in number of functions
armv6m.disp_block_size = 8 # bytes
### The block_load_latency is 4, it should be 3, but there is an additional cycle charged for load dispatch. This favours the cache.
armv6m.disp_block_load_latency = 4 # cycles + 1 cycle is cost of block load
armv6m.disp_controller_hit_cycles = 4 # cycles for table lookup and context register write (including on wait cycle to reallow fetches)
armv6m.disp_controller_miss_cycles = 5 # cycles for internal processing, like table lookup, context register write and write latencies (including on wait cycle to reallow fetches)
# NOTICE: if the cache is enabled the worst case memory access time load or store (to shared off-chip mem (not DSP)) can be interrupted by a cache miss
armv6m.icache_line_size = 32 # byte
armv6m.icache_miss_latency = 16 # 4*4 cycles (to 4 64bit load blocks) + 1 cycle (for miss handling) results in the cost of a cache miss - 1 cycle (since the latency is used here)

# NOTICE: it is assumed that a replaced jump has the same capabilities of checking a condition as the original one! (which is not necessarily true)
# Jump penalties for basic block assignment in static scratchpad optimization
armv6m.jump_penalty_for_continuous_addressing = 14 # cycles penalty for adding a jump to connect a moved block (resp. to return from a moved block)
armv6m.jump_penalty_for_jump_disp4 = 3 # cycles penalty for replacing a jump (with 4 bit displacement)  by a jump that allows to bridge the address space between the scratchpad and main memory
armv6m.jump_penalty_for_jump_disp8 = 3 # cycles penalty for replacing a jump (with 8 bit displacement)  by a jump that allows to bridge the address space between the scratchpad and main memory
armv6m.jump_penalty_for_jump_disp15 = 0 # cycles penalty for replacing a jump (with 15 bit displacement) by a jump that allows to bridge the address space between the scratchpad and main memory
armv6m.jump_penalty_for_jump_disp24 = 0 # cycles penalty for replacing a jump (with 24 bit displacement) by a jump that allows to bridge the address space between the scratchpad and main memory
armv6m.jump_penalty_for_jump_ind = 0 # cycles penalty for an indirect jump (full 32 bit are used for target address). The penalty has to be 0 since every address in the processors address space is reachable.
armv6m.jump_penalty_for_call_disp8 = 3 # cycles penalty for replacing a call (with 8 bit displacement) by a call that allows to bridge the address space between the scratchpad and main memory
armv6m.jump_penalty_for_call_disp24 = 0 # cycles penalty for replacing a call (with 24 bit displacement) by a call that allows to bridge the address space between the scratchpad and main memory
armv6m.jump_penalty_for_call_ind = 0 # cycles penalty for an indirect call (full 32 bit are used for target address). The penalty has to be 0 since every address in the processors address space is reachable.

# NOTICE: it is assumed that a replaced jump has the same capabilities of checking a condition as the original one! (which is not necessarily true)
# ALSO NOTICE: If the size of a basic block is increased, it will be always increased by a multiple of the fetch block size, to not affect the alignment of the successor blocks.
# Size penalties for basic block assignment in static scratchpad optimization
armv6m.size_penalty_for_continuous_addressing = 4 # bytes penalty for adding a jump to connect a moved block (resp. to return from a moved block)
armv6m.size_penalty_for_jump_disp4 = 2 # bytes penalty for replacing a jump (with 4 bit displacement)  by a jump that allows to bridge the address space between the scratchpad and main memory
armv6m.size_penalty_for_jump_disp8 = 2 # bytes penalty for replacing a jump (with 8 bit displacement)  by a jump that allows to bridge the address space between the scratchpad and main memory
armv6m.size_penalty_for_jump_disp15 = 0 # bytes penalty for replacing a jump (with 15 bit displacement) by a jump that allows to bridge the address space between the scratchpad and main memory
armv6m.size_penalty_for_jump_disp24 = 0 # bytes penalty for replacing a jump (with 24 bit displacement) by a jump that allows to bridge the address space between the scratchpad and main memory
armv6m.size_penalty_for_jump_ind = 0 # bytes penalty for an indirect jump (full 32 bit are used for target address). The penalty has to be 0 since every address in the processors address space is reachable.
armv6m.size_penalty_for_call_disp8 = 2 # bytes penalty for replacing a call (with 8 bit displacement) by a call that allows to bridge the address space between the scratchpad and main memory
armv6m.size_penalty_for_call_disp24 = 0 # bytes penalty for replacing a call (with 24 bit displacement) by a call that allows to bridge the address space between the scratchpad and main memory
armv6m.size_penalty_for_call_ind = 0 # bytes penalty for an indirect call (full 32 bit are used for target address). The penalty has to be 0 since every address in the processors address space is reachable.

